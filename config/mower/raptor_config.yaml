%YAML:1.0

#common parameters
wheel: 0    #use wheel
only_initial_with_wheel: 0    #only use wheel with initial, not used in optimization
plane: 0    #plane cons

imu_topic: "/ninebot/body_imu"
image_topic: "/ninebot/fisheye"
odom_topic: "/ninebot/encoder_odom_3D" 
output_path: "/persist/mower_data/output/vins"
tf_topic: "/tf"
encoder_topic: "/fixposition/wheel/data"

#camera calibration 
model_type: KANNALA_BRANDT
camera_name: camera
image_width: 640       #1280
image_height: 360       #720
# distortion_parameters:  [1.01956775551451]
projection_parameters:
   k2: -0.0305997
   k3: 0.0295372
   k4: -0.0550386
   k5: 0.0273376
   mu: 268.1475
   mv: 266.6645 
   u0: 317.094
   v0: 182.548

# Extrinsic parameter between IMU and Camera.
estimate_extrinsic: 1   # 0  Have an accurate extrinsic parameters. We will trust the following imu^R_cam, imu^T_cam, don't change it.
                        # 1  Have an initial guess about extrinsic parameters. We will optimize around your initial guess.
                        # 2  Don't know anything about extrinsic parameters. You don't need to give R,T. We will try to calibrate it. Do some rotation movement at beginning.                        
#If you choose 0 or 1, you should write down the following matrix.
#Rotation from camera frame to imu frame, imu^R_cam
extrinsicRotation: !!opencv-matrix    #todo
   rows: 3
   cols: 3
   dt: d
   data: [1, 0,  0,
          0, 0,  1,
          0, -1, 0 ]

#Translation from cam0era frame to imu frame, imu^T_cam
extrinsicTranslation: !!opencv-matrix   # todo
   rows: 3  
   cols: 1
   dt: d
   data: [0.440, 0.139, 0.260]

# Extrinsic parameter between IMU and wheel.
estimate_wheel_extrinsic: 2   # 0  Have an accurate extrinsic parameters. We will trust the following imu^R_wheel, imu^T_wheel, don't change it.
  # 1  Have an initial guess about extrinsic parameters. We will optimize around your initial guess.
# 2  Don't know anything about extrinsic parameters. You don't need to give R,T. We will try to calibrate it. Do some rotation movement at beginning.
#If you choose 0 or 1, you should write down the following matrix.

extrinsic_type_wheel: 3 # 0 ALL
                        # 1 Only translation
                        # 2 Only Rotation
                        # 3 no z
                        # 4 no rotation and no z
#wheel to body
body_T_wheel: !!opencv-matrix
  rows: 4
  cols: 4
  dt: d
  data: [1, 0, 0, 0.023,
         0, 1, 0, 0.730,
         0, 0, 1, -0.248,
         0, 0, 0, 1]

#plane
roll_n: 0.01
pitch_n: 0.01
zpw_n: 0.005

#feature traker paprameters
max_cnt: 150            # max feature number in feature tracking  for mower 150 before
min_dist: 10             # min distance between two features             for mower  30 before
freq: 10                # frequence (Hz) of publish tracking result. At least 10Hz for good estimation. If set 0, the frequence will be same as raw image 
F_threshold: 1.0         # ransac threshold (pixel)
show_track: 1           # publish tracking image as topic
equalize: 1             # if image is too dark or light, trun on equalize to find enough features
fisheye: 0              # if using fisheye, trun on it. A circle mask will be loaded to remove edge noisy points
down_sample: 1.0        # if use mower = 2.0 


#optimization parameters
max_solver_time: 0.04  # max solver itration time (ms), to guarantee real time
max_num_iterations: 8   # max solver itrations, to guarantee real time
keyframe_parallax: 10.0 # keyframe selection threshold (pixel)

#imu parameters       The more accurate parameters you provide, the better performance
acc_n: 4.05e-1          # accelerometer measurement noise standard deviation. #0.2   0.04
gyr_n: 4.05e-2       # gyroscope measurement noise standard deviation.     #0.05  0.004
acc_w: 2.66e-3        # accelerometer bias random work noise standard deviation.  #0.02
gyr_w: 9.5e-4       # gyroscope bias random work noise standard deviation.     #4.0e-5
g_norm: 9.80122     # gravity magnitude  beijing = 9.80122 

#wheel parameters
# rad/s
wheel_gyro_noise_sigma: 0.015
#m/s
wheel_velocity_noise_sigma: 0.015

estimate_wheel_intrinsic: 0
# 0  Have an accurate intrinsic parameters. We will trust the following sx, sy, sw, don't change it.
# 1  Have an initial guess about intrinsic parameters. We will optimize around your initial guess.
# 2  TODO Don't know anything about intrinsic parameters. You don't need to give sx, sy, sw. We will try to calibrate it. Do some rotation movement at beginning.
#If you choose 0 or 1, you should write down the following sx, sy, sw.
# wheel intrinsic
sx: 1.2
sy: 1.2
sw: 1.2


#loop closure parameters
loop_closure: 1                    # start loop closure
load_previous_pose_graph: 0        # load and reuse previous pose graph; load from 'pose_graph_save_path'
fast_relocalization: 0             # useful in real-time and large project
pose_graph_save_path: "/persist/mower_data/output/pose_graph/" # save and load path

#unsynchronization parameters
estimate_td: 0                      # online estimate time offset between camera and imu
td: 0.004817413917265579            # initial value of time offset. unit: s. readed image clock + td = real image clock (IMU clock)
estimate_td_wheel: 0                # online estimate time offset between camera and wheel
td_wheel: 0.0                       # initial value of time offset. unit: s. readed image clock + td = real image clock (wheel clock)

#rolling shutter parameters
rolling_shutter: 0                  # 0: global shutter camera, 1: rolling shutter camera
rolling_shutter_tr: 0               # unit: s. rolling shutter read out time per frame (from data sheet). 

#visualization parameters
save_image: 1                   # save image in pose graph for visualization prupose; you can close this function by setting 0 
visualize_imu_forward: 0        # output imu forward propogation to achieve low latency and high frequence results
visualize_camera_size: 0.4      # size of camera marker in RVIZ

#encoder parmameters
is_encoder: 0
encoder_resolution: 16384
left_wheel_diameter: 0.2
right_wheel_diameter: 0.2
wheelbase: 0.391
enc_n: 0.1
extrinsicRotation_io: !!opencv-matrix
   rows: 3
   cols: 3
   dt: d
   data: [0.01173515, -0.01636978, -0.99979714,
          -0.99977628,  0.01740452, -0.01201987, 
          0.01759775,  0.99971452, -0.01616187]
extrinsicTranslation_io: !!opencv-matrix
   rows: 3
   cols: 1
   dt: d
   data: [-0.05850902, -0.00742235, -0.00044148]